{"version":3,"file":"js/application.js","mappingsvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sources":["webpack://app/./app/packs/src/decidim/gis_luzern.js.es6","webpack://app/webpack/bootstrap","webpack://app/./app/packs/entrypoints/application.js"],"sourcesContent":["// = require leaflet\n// = require leaflet.markercluster\n// = require proj4\n// = require proj4leaflet\n// = require esri-leaflet/dist/esri-leaflet\n// = require leaflet-tilelayer-swiss\n// = require leaflet-svg-icon\n// = require jquery-tmpl\n// = require_self\n// = require decidim/map\n\n/**\n * NOTE:\n * This has to load before decidim/map in order for it to apply correctly when\n * the map is initialized. The document.ready handler set by this script has to\n * be registered before decidim/map registers its own.\n *\n * Also it has to load after JQuery.\n */\n((exports) => {\n  const $ = exports.$; // eslint-disable-line\n  const L = exports.L; // eslint-disable-line\n\n  $(() => {\n    exports.Decidim = exports.Decidim || {};\n    const MapMarkersController = exports.Decidim.MapMarkersController;\n    const MapStaticController = exports.Decidim.MapStaticController;\n\n    class GisLuzernMapController extends MapMarkersController {\n      start() {\n        this.setCoordinateReferenceSystem()\n        this.addTileLayers()\n\n        // Don't render any markers that are out of bounds due to wrong geocoding\n        // or because they're simply located someplace the GIS maps don't cover\n        this.config.markers = this.config.markers.filter(marker => {\n          return marker.latitude > this.config.mapLimits.latMin &&\n            marker.latitude < this.config.mapLimits.latMax &&\n            marker.longitude > this.config.mapLimits.lngMin &&\n            marker.longitude < this.config.mapLimits.lngMax\n        })\n\n        // decidim adds the markers for us, but if navigation maps are active,\n        // a different L without the markercluster plugin is used for some reason.\n        // Workaround is to overwrite the global L again from here.\n        exports.L = L\n        super.start()\n\n        this.setViewport()\n      }\n\n      setCoordinateReferenceSystem() {\n        // Swiss coordinate system LV95 is used in these maps, see https://epsg.io/2056\n        this.map.options.crs = L.CRS.EPSG2056;\n      }\n\n      addTileLayers() {\n        const tileLayers = Object.fromEntries(Object.entries(this.config.layers).map(([_, layer]) => {\n\n          if (layer.type === 'swisstopo') {\n            return [ layer.name, L.tileLayer.swiss({\n              layer: layer.layer || 'ch.swisstopo.pixelkarte-farbe'\n            }).addTo(this.map) ]\n          }\n\n          return [\n            layer.name,\n            L.esri.tiledMapLayer({\n              url: layer.url,\n              attribution: layer.attribution || this.config.attribution,\n              minZoom: 0,\n              maxZoom: 9,\n            }).addTo(this.map)\n          ];\n\n        }));\n\n        L.control.layers(tileLayers).addTo(this.map);\n      }\n\n      setViewport() {\n        if (this.config.markers.length === 0) {\n          const center = this.config.defaultCenter ? [this.config.defaultCenter.lat, this.config.defaultCenter.lng] : [0,0];\n          const bounds = new L.LatLngBounds([center, center]);\n          this.map.fitBounds(bounds, {padding: [100, 100], maxZoom: 19});\n        } else {\n          const bounds = new L.LatLngBounds(this.config.markers.map((markerData) => [markerData.latitude, markerData.longitude]));\n          this.map.fitBounds(bounds, {padding: [100, 100], maxZoom: 23});\n        }\n      }\n    }\n\n    // We need to replace the dynamic map controller of decidim and use our own\n    exports.Decidim.createMapController = (mapId, config) => {\n      if (config.type === \"static\") {\n        return new MapStaticController(mapId, config);\n      }\n\n      return new GisLuzernMapController(mapId, config);\n    }\n\n    $(\"[data-decidim-map]\").on(\"configure.decidim\", (_ev, map, _mapConfig) => {\n      $(map._container).css(\"display\", \"block\");\n    })\n  });\n\n})(window);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint no-console:0 */\n// This file is automatically compiled by Webpack, along with any other files\n// present in this directory. You're encouraged to place your actual application logic in\n// a relevant structure within app/packs and only use these pack files to reference\n// that code so it'll be compiled.\n//\n// To reference this file, add <%= javascript_pack_tag 'application' %> to the appropriate\n// layout file, like app/views/layouts/application.html.erb\n\n// Uncomment to copy all static images under ../images to the output folder and reference\n// them with the image_pack_tag helper in views (e.g <%= image_pack_tag 'rails.png' %>)\n// or the `imagePath` JavaScript helper below.\n//\n// const images = require.context('../images', true)\n// const imagePath = (name) => images(name, true)\n\n// Activate Active Storage\n// import * as ActiveStorage from \"@rails/activestorage\"\n// ActiveStorage.start()\n\nrequire('../src/decidim/gis_luzern.js.es6');\n"],"names":[],"sourceRoot":""}